import factory.ChocolateFactory;
import sweets.Chocolate;
import sweets.Sweets;

/**
 * Задание "Упаковка подарка".
 * 1) Реализовать: функциональный интерфейс фабрики сладостей - который имеет один абcтрактный метод по созданию вкусняшек.
 * Реализовать данный интерфейс 4 раза - 2 как отдельные классы, 2 в коде через лямбды (см в презентации Person::new)
 * то есть фабрика может генерировать только определенные классы сладостей, только печеньки или только шоколадки,
 * или строго по весу подбирать или по цене (тут на ваше усмотрение).
 * 2) Реализовать policy для коробочки - таким образом чтобы можно было создать коробку с определенным предикатом -
 * то есть добавление только определенных сладостей, которые соответствуют какому либо условию (опять-таки на свое усмотрение),
 * также реализовать 2 класса использующего данный интерфейс и позволить использовать лямбды.
 * 3) Реализовать внутри коробочки что-то типа CostCalculator  (будем считать что по умолчанию все цены в рублях,
 * а данная сущность будет его переводить в другие единицы - необходимо также создать интерфейс, и пару его реализаций -
 * рубли, евро и предоставить возможность объявить его в виде лямбды).
 * 4) Также добавить в коробочку несколько методов,  внутри использующих Stream API -
 * вывести название класса каждой сладости, посчитать количество определенного вида сладостей в коробке
 * 5) Для более симпатичной реализации классов самих сладостей, можете добавить ENUM’ы.
 * Там типа шоколада (белый, молочный, темный), размерности (S, M, XL) или еще что-то
 * <p>
 * Пользователь может добавлять по одному виду каждой сладости за раз (сейчас есть 3 вида).
 *
 * @author Oleg Berezhnoy
 */
public class Gift {
    public static void main(String[] args) {

        GiftBox giftBox = new GiftBox(); //создаём новую подарочную коробку

        ChocolateFactory alenkaFactory = Chocolate::new;
        Sweets chocolateAlenkaMilk = alenkaFactory.createSweets("Алёнка молочный");
        System.out.println(chocolateAlenkaMilk);

//        ChocolateFactory<Chocolate> chocolateFactory = Chocolate::new;
//        Sweets chocolate = chocolateFactory.create("Алёнка", "молочный");
    }
}
